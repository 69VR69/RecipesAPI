openapi: 3.0.3
info:
  title: Food time
  version: 0.0.1
tags:
  - name: recipe
    description: Recipes
  - name: steps
    description: How to cook
paths:
  /recipes:
    get:
      summary: Get all recipes
      description: Get all recipes (paginated)
      operationId: getRecipes
      # Add pagination query parameters
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
      tags:
        - recipe
    post:
      summary: Create a recipe
      description: Create a recipe
      operationId: createRecipe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid data supplied
      tags:
        - recipe
    
  /recipes/{recipeId}:
    parameters:
      - name: recipeId
        in: path
        description: Recipe ID
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get an existing recipe
      description: Get an existing recipe by Id
      operationId: getRecipe        
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '404':
          description: Recipe not found
      tags:
        - recipe
    put:
      summary: Update an existing recipe
      description: Update an existing recipe by Id
      operationId: updateRecipe
      requestBody:
        description: Update an existent recipe
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '400':
          description: Invalid ID supplied
        '404':
          description: Recipe not found
      tags:
        - recipe
    delete:
      summary: Remove a recipe
      description: Remove a recipe by Id
      operationId: deleteRecipe
      responses:
        '200':
          description: Successful operation
        '404':
          description: Recipe not found
      tags:
        - recipe

  /recipes/{recipeId}/steps:
    parameters:
      - name: recipeId
        in: path
        description: Recipe ID
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get steps of a recipe
      description: Get steps of an existing recipe by Id
      operationId: getRecipeSteps
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Step'
        '404':
          description: Recipe not found
      tags:
        - step
    post:
      summary: Add step to a recipe
      description: Add a step to an existing recipe
      operationId: addRecipeStep
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Step'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid data supplied
      tags:
        - step

  /recipes/{recipeId}/steps/{stepId}:
    parameters:
      - name: recipeId
        in: path
        description: Recipe ID
        required: true
        schema:
          type: integer
          format: int64
      - name: stepId
        in: path
        description: Step ID
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get a step of a recipe
      description: Get a specific step of an existing recipe by Id
      operationId: getRecipeStep
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Step'
        '404':
          description: Step not found
      tags:
        - step
    put:
      summary: Update step of a recipe
      description: Update a step of an existing recipe
      operationId: updateRecipeStep
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Step'
      responses:
        '200':
          description: Successful operation
        '404':
          description: Step not found
        '400':
          description: Invalid data supplied
      tags:
        - step
    delete:
      summary: Delete step of a recipe
      description: Delete a step of an existing recipe
      operationId: deleteRecipeStep
      responses:
        '200': 
          description: Successful operation
      tags:
        - step

components:
  schemas:
    Recipe:
      required:
        - name
        - ingredients
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: omelette
        ingredients:
          required:
            - ingredient
            - quantity
          type: array
          items:
            type: object
            properties:
              ingredient:
                type: integer
                format: int64
                example: 10
              quantity:
                type: integer
                example: 5
    Step:
      required:
        - description
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        description:
          type: string
          example: MÃ©langer le beurre et le chocolat
        ingredients:
          required:
            - ingredient
            - quantity
          type: array
          items:
            type: object
            properties:
              ingredient:
                type: integer
                format: int64
                example: 10
              quantity:
                type: integer
                example: 5
  requestBodies:
    Recipe:
      description: Recipe object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Recipe'
    Step:
      description: Step object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Step'